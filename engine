package com.cloudhinteractive.engine;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;
//change "Engine" to designated game name. 
//this is all ready to run on download.

public class Engine extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;
	// change game size here:
	public static int width = 300;
	public static int height = width / 16 * 9;
	public static int scale = 3;

	private Thread thread;
	private JFrame frame;
	private boolean running = false;
	private BufferedImage image = new BufferedImage(width, height,
			BufferedImage.TYPE_INT_RGB);
	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer())
			.getData();
	private Screen screen;

	// constructor of the class:
	public Engine() {
		Dimension size = new Dimension(width * scale, height * scale);
		setPreferredSize(size);
		screen = new Screen(width, height);
		frame = new JFrame();
	}

	// threading processing here, suggest not changing:
	public synchronized void start() {
		running = true;
		thread = new Thread(this, "Resolution");
		thread.start();
	}

	public synchronized void stop() {
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	// what the game will be running. . .
	// spoons = the fixed set of what the game will update
	// forks = how fast the game can actually render.
	public void run() {
		while (running) {
			spoons();
			forks();
		}
	}

	public void spoons() {

	}

	// buffer strategy is bs
	public void forks() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}

		screen.clear();
		screen.render();
		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = screen.pixels[i];
		}

		// Recommend changing these variables before you create the game.
		// A white background the size of the application is the default.
		Graphics g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
		g.dispose();
		bs.show();
	}

	public static void main(String[] args) {
		Engine engine = new Engine();
		engine.frame.setResizable(false);
		engine.frame.setTitle("CloudHinteractive");
		engine.frame.add(engine);
		engine.frame.pack();
		engine.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		engine.frame.setLocationRelativeTo(null);
		engine.frame.setVisible(true);
		engine.start();
	}
}
